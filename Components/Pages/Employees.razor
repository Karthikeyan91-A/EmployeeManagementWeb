@page "/employees"
@using Employee_Management_Web.Models
@using Employee_Management_Web.Repository.Interface
@inject IEmployeeRepository _employeeRepository;
@inject NavigationManager navigationManager;


<h3>Employee List</h3>
@if(employees == null)
{
    <p><em>Loading..</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Department</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var employee in employees)
            {
                <tr>
                    <td>@employee.EmployeeId</td>
                    <td>@employee.FirstName</td>
                    <td>@employee.LastName</td>
                    <td>@(employee.Department !=null ? @employee.Department.DepartmentName : "N/A")</td> 
                    <td>
                        <button class="btn btn-primary" onclick="() => EditEmployee(@employee.EmployeeId)">Edit</button>
                        <button class="btn btn-primary"  onclick="() => DeleteEmployee(@employee.EmployeeId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
  
    <button class="btn btn-success" onclick=" ()=> addEmployee">Add</button>
}

@code {
    List<Employee> employees = new List<Employee>();


    protected override async Task OnInitializedAsync()
    {
        employees = await _employeeRepository.GetEmployeesAsync();
    }

    private void EditEmployee(int id) {
        navigationManager.NavigateTo($"/employees/edit/{id}");
    }

    private async void DeleteEmployee(int id)
    {
        await _employeeRepository.DeleteEmployeeAsync(id);
    }

}

